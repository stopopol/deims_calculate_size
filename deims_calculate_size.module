<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\geofield\GeoPHP\GeoPHPInterface;
use Drupal\Core\Plugin\DefaultPluginManager;

# this code requires laravel geometry: https://github.com/spinen/laravel-geometry
# install with
# sudo -HEu www-data php composer require spinen/laravel-geometry
# https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_presave/10

/**
 * Implements hook_entity_presave().
 */
function deims_calculate_size_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
	
	// only called when nodes are saved
	if ($entity->getEntityTypeId() == 'node') {
		
		// that are either sites or locations 
		if ($entity->getType() == "site" || $entity->getType() == "observation_location") {
			
			// boundaries field needs to be filled
			if ($entity->get('field_boundaries')->getValue()) {
												
				$current_boundaries_content = json_decode(\Drupal::service('geofield.geophp')->load($entity->get('field_boundaries')->value)->out('json'));
				$old_boundaries_content = json_decode(\Drupal::service('geofield.geophp')->load($entity->original->get('field_boundaries')->value)->out('json'));
				
				\Drupal::messenger()->addMessage(serialize($current_boundaries_content), 'custom');
				\Drupal::messenger()->addMessage('Node is either site or location and has boundaries', 'custom');
				
													
				// check if boundaries have changed from last save
				if ($current_boundaries_content != $old_boundaries_content) {
						
					\Drupal::messenger()->addMessage('Boundaries have changed', 'custom');	
					
					$geo = new geoPHP();
					$mapper = new Spinen\Geometry\Support\TypeMapper();
					$geometry = new Spinen\Geometry\Geometry($geo, $mapper);
						
					//$geom = geoPHP::load($entity->get('field_boundaries')->getValue(),'wkb');
					// check for type, if multipolygon loop is needed
					$geom_type = $entity->get('field_boundaries')->geo_type;
						
					//$collection = $geometry->parseGeoJson($polygon);
					// $squareMeters = $collection->getSquareMeters();
					
					// 
						
					//$entity->field_size->value = 999; 

				}
			}
			
		}
		
	}

}
